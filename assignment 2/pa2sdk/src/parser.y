%{

#include <stdio.h>
#include <string.h>
#include "parser.h"

// Defined in the C file generated by flex. We can't include lexer.h because
// that'd cause a circular dependency (we need the header generated by bison to
// generate the lexer.h header).
extern int yylex(void);
static void yyerror( int *returnval, int *type, const char* p);
extern char* undef;


%}
%expect 69
// These get stuck in a token enum in the header bison generates (parser.h),
// which we can then include in our lexer spec.
%token VAR TYPE FUNCTION
      FOR TO WHILE IF ELSE RETURN
      NIL TRUE FALSE
      INT BOOL
      ID STR NUM
      UNKNOWN
      EVAL

// These associate tokens with string lits like "<=" so we can use them in our
// grammar.
%token LT_EQ "<="
%token GT_EQ ">="
%token EQ "=="
%token NOT_EQ "!="

//values sent to yyparse() they are pointers so we can change them later to returnvalues from yyparse()
%parse-param {int *returnval} {int *type}

// The type of yylval.
%union {
      int val;
};



//Type
%type <val> NUM INT

%left '|'
%left '&'
%left GR_EQ NOT_EQ
%left '>' '<' LT_EQ GT_EQ
%left '+' '-'
%left '*' '/' '%'
%left UPLUS UMINUS '!'
// The top-level rule.
%start program

%%

// A Liger program is either a list of declarations or it's an "extended Liger"
// program -- an EVAL token followed by a Liger expression.
program: 
      decls
      | EVAL '(' exp ')' ';'


decls:
       VAR ID ':' exp ';' decls
       |TYPE ID ':' exp ';' decls
       |decls func 
       |

decls1:
        ID ':' exp decls2
decls2:
        ',' decls1
        |

func:
      FUNCTION ID '(' decls1 ')' ':' INT '{' exp '}'
      |FUNCTION ID '(' decls1 ')' '{' exp '}'
      |FUNCTION ID '(' ')' '{' exp '}'
      |FUNCTION ID '(' ')' '{' '}'
func1:
     ID '(' exp ')'
     |ID '(' ')'
exp: 
     //lValue
     INT
     |ID
     |NUM
     |NIL
     |STR
     |TRUE
     |FALSE
     |func
     |func1 
     |unOp exp
     |ID '{' fieldExpList '}'
     |'[' exp ']'
     |'[' arglist ']'
     |'{' decls1 '}'
     |'{' fieldExpList '}'
     |'(' expList ')'
     |RETURN exp ';'
     |exp '+' exp    {$$ = $1 + $2;}
     |exp '-' exp    {$$ = $1 - $2;}
     |exp '*' exp    {$$ = $1 * $2;}
     |exp '/' exp    {$$ = $1 / $2;}
     |exp '%' exp    {$$ = $1 % $2;}
     |exp LT_EQ exp  {$$ = $1 + $2;}
     |exp GT_EQ exp  {$$ = $1 + $2;}
     |exp EQ exp     {$$ = $1 + $2;}
     |exp NOT_EQ exp {$$ = $1 + $2;}
     |exp '=' exp    {$$ = $1 + $2;}
     |exp '>' exp    {$$ = $1 + $2;}
     |exp '<' exp    {$$ = $1 + $2;}
     |exp '&' exp    {$$ = $1 + $2;}
     |exp '|' exp    {$$ = $1 + $2;}
     /*|lValue '=' exp
     |IF '(' exp ')' '{' exp '}' 
     |IF '(' exp ')' '{' exp '}' ELSE '{' exp '}'
     |WHILE '(' exp ')' '{' exp '}'
     |FOR '(' exp TO exp')' '{' exp '}'*/

/*lValue:
      ID
      |lValue '.' ID
      |lValue '[' exp ']'*/

arglist:
      exp arglist1
      |
arglist1:
      ',' exp arglist1
      |

expList:
      exp expList1
      |

expList1:
      ';' expList1
      |

unOp:
      '!'
      |'-'
      |'+'

fieldExpList:
      ID '=' exp fieldExpList1
      |

fieldExpList1:
      ',' ID '=' exp fieldExpList1
      |


     
%%


void yyerror( int *returnval, int *type, const char* p) {
      fprintf(stderr, "%s\n", p);
}

